/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package de.hska.vislab.micro.api;

import de.hska.vislab.model.ModelApiResponse;
import de.hska.vislab.model.Product;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;

@javax.annotation.Generated(
        value = "io.swagger.codegen.languages.SpringCodegen",
        date = "2018-05-09T06:42:04.687Z"
)
@Api(value = "products", description = "the products API")
public interface ProductsApi {

    @ApiOperation(
            value = "Add a new product to the store",
            nickname = "addProduct",
            notes = "",
            response = ModelApiResponse.class,
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
                    @ApiResponse(code = 405, message = "Invalid input")
            }
    )
    @RequestMapping(
            value = "/products/addProduct",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST
    )
    ResponseEntity<ModelApiResponse> addProduct(
            @ApiParam(value = "Product object that needs to be added to the store", required = true)
            @Valid
            @RequestBody
                    Product body);

    @ApiOperation(
            value = "Delete product by ID",
            nickname = "deleteProduct",
            notes =
                    "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 404, message = "Product not found")
            }
    )
    @RequestMapping(
            value = "/products/{productId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE
    )
    ResponseEntity<Void> deleteProduct(
            @Min(1)
            @ApiParam(value = "ID of the product that needs to be deleted", required = true)
            @PathVariable("productId")
                    String productId);

    @ApiOperation(
            value = "Finds Products",
            nickname = "findProduct",
            notes = "Multiple query values can be provided with comma separated strings",
            response = Product.class,
            responseContainer = "List",
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(
                            code = 200,
                            message = "successful operation",
                            response = Product.class,
                            responseContainer = "List"
                    ),
                    @ApiResponse(code = 400, message = "Invalid product value")
            }
    )
    @RequestMapping(
            value = "/products/query",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<List<Product>> findProduct(
            @ApiParam(value = "name value that need to be considered for filter")
            @Valid
            @RequestParam(value = "search", required = false)
                    String search,
            @ApiParam(value = "min price value that need to be considered for filter")
            @Valid
            @RequestParam(value = "price_min", required = false)
                    Double priceMin,
            @ApiParam(value = "max price value that need to be considered for filter")
            @Valid
            @RequestParam(value = "price_max", required = false)
                    Double priceMax);

    @ApiOperation(
            value = "Get product by ID",
            nickname = "getProductById",
            notes =
                    "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
            response = Product.class,
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation", response = Product.class),
                    @ApiResponse(code = 404, message = "Product not found")
            }
    )
    @RequestMapping(
            value = "/products/{productId}",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<Product> getProductById(
            @Min(1)
            @ApiParam(value = "ID of the product that needs to be found", required = true)
            @PathVariable("productId")
                    String productId);

    @ApiOperation(
            value = "Get product by Name",
            nickname = "getProductByName",
            notes =
                    "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
            response = Product.class,
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation", response = Product.class),
                    @ApiResponse(code = 404, message = "Product not found")
            }
    )
    @RequestMapping(
            value = "/products/name/{productName}",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<Product> getProductByName(
            @Min(1)
            @ApiParam(value = "Name of the product that needs to be found", required = true)
            @PathVariable("productName")
                    String productName);

    @ApiOperation(
            value = "Lists all products of the store",
            nickname = "getProducts",
            notes = "",
            response = Product.class,
            responseContainer = "List",
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(
                            code = 200,
                            message = "successful operation",
                            response = Product.class,
                            responseContainer = "List"
                    )
            }
    )
    @RequestMapping(
            value = "/products",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<List<Product>> getProducts();

    @ApiOperation(
            value = "Get products by categoryID",
            nickname = "getByCategory",
            notes =
                    "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "products",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation"),
                    @ApiResponse(code = 400, message = "Invalid ID supplied"),
            }
    )
    @RequestMapping(
            value = "/products/category/{categoryId}",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<List<Product>> getByCategory(
            @Min(1)
            @ApiParam(value = "ID of the category for the products", required = true)
            @PathVariable("categoryId")
                    String categoryId);
}
