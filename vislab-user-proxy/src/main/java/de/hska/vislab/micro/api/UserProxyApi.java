/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package de.hska.vislab.micro.api;

import de.hska.vislab.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(
        value = "io.swagger.codegen.languages.SpringCodegen",
        date = "2018-05-09T06:42:04.687Z"
)
@Api(value = "userProxy", description = "the user proxy API")
public interface UserProxyApi {

    @ApiOperation(
            value = "Find user by username",
            nickname = "getUserbyUserName",
            notes = "",
            response = User.class,
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "user",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation", response = User.class),
                    @ApiResponse(code = 400, message = "Invalid username supplied")
            }
    )
    @RequestMapping(
            value = "/user/{username}",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<User> getUserByUserName(
            @Min(1)
            @ApiParam(value = "Username of the user that needs to be found", required = true)
            @PathVariable(value = "username", required = true)
                    String username);


    @ApiOperation(
            value = "Register user",
            nickname = "createUser",
            notes = "",
            tags = {
                    "user",
            }
    )
    @ApiResponses(value = {@ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(
            value = "/user/register",
            produces = {"application/json"},
            method = RequestMethod.POST
    )
    ResponseEntity<Void> createUser(
            @ApiParam(value = "Created user object", required = true) @Valid @RequestBody User body);

    @ApiOperation(
            value = "Logs user into the system",
            nickname = "loginUser",
            notes = "",
            response = String.class,
            tags = {
                    "user",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation", response = String.class),
                    @ApiResponse(code = 400, message = "Invalid username/password supplied")
            }
    )
    @RequestMapping(
            value = "/user/login",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<String> loginUser(
            @NotNull
            @ApiParam(value = "The user name for login", required = true)
            @Valid
            @RequestParam(value = "username", required = true)
                    String username,
            @NotNull
            @ApiParam(value = "The password for login in clear text", required = true)
            @Valid
            @RequestParam(value = "password", required = true)
                    String password);

    @ApiOperation(
            value = "Logs out current logged in user session",
            nickname = "logoutUser",
            notes = "",
            tags = {
                    "user",
            }
    )
    @ApiResponses(value = {@ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(
            value = "/user/logout",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<Void> logoutUser();

    @ApiOperation(
            value = "Lists all users of the store",
            nickname = "getUsers",
            notes = "",
            response = User.class,
            responseContainer = "List",
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "users",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(
                            code = 200,
                            message = "successful operation",
                            response = User.class,
                            responseContainer = "List"
                    )
            }
    )
    @RequestMapping(
            value = "/users",
            produces = {"application/json"},
            method = RequestMethod.GET
    )
    ResponseEntity<List<User>> getUsers();

    @ApiOperation(
            value = "Delete user  by ID",
            nickname = "deleteByID",
            notes =
                    "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
            authorizations = {
                    @Authorization(
                            value = "store_auth",
                            scopes = {}
                    )
            },
            tags = {
                    "users",
            }
    )
    @ApiResponses(
            value = {
                    @ApiResponse(code = 200, message = "successful operation"),
                    @ApiResponse(code = 400, message = "Invalid ID supplied"),
            }
    )
    @RequestMapping(
            value = "/user/{userId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE
    )
    ResponseEntity<Void> deleteById(
            @Min(1)
            @ApiParam(value = "ID of the user that needs to be deleted", required = true)
            @PathVariable("userId")
                    String userId);
}
